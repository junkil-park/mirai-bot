name: MIRAI

# Why `on: repository_dispatch`?
#
# If we trigger this action on pull_request events,
# then it will run with the forked repo GITHUB_TOKEN
# this is a problem as it won't allow the action to write
# a comment on the PR in the last step.
#
# instead, we trigger this remotely via a bot we're running ourselves.
on:
  repository_dispatch:
    types: [new_PR]

jobs:
  install_and_run_MIRAI:
    runs-on: ubuntu-latest

    steps:
      - name: Install Z3
        uses: pavpanchekha/setup-z3@v1.2
      - name: Checkout MIRAI
        uses: actions/checkout@v2
        with:
          repository: "facebookexperimental/MIRAI"
          path: "MIRAI"
      - name: Install MIRAI
        if: success()
        working-directory: ./MIRAI
        run: |
          set -x
          rustup component add rustc-dev
          RUSTFLAGS='-Clink-arg=-L./binaries -Clink-arg=-lstdc++' cargo install --path ./checker
      - name: Checkout libra
        if: success()
        uses: actions/checkout@v2
        with:
          path: "libra"
          fetch-depth: 50 # this is to make sure we obtain the target base commit
          repository: ${{ github.event.client_payload.owner }}/${{ github.event.client_payload.repo }} # repo of the forked libra/libra
          ref: ${{ github.event.client_payload.pull_ref }} # commit that triggered the PR
      - name: Build target base then checkout PR to only run MIRAI on the changes
        if: success()
        working-directory: ./libra
        env:
          BASE: ${{ github.event.client_payload.base_ref }}
        run: |
          set -x
          rustup override set `cat ../MIRAI/rust-toolchain`
          rustup component add rustc-dev
          git checkout $BASE
          RUSTFLAGS="-Z always_encode_mir" cargo build
          git checkout -
      - name: Run MIRAI on PR
        if: success()
        working-directory: ./libra
        timeout-minutes: 60
        run: |
          set -o pipefail
          RUSTC_WRAPPER=mirai RUSTFLAGS="-Z always_encode_mir" cargo build --message-format=json -q 2>/dev/null | tee ../mirai_results
      - name: Get files that were changed
        if: success()
        working-directory: ./libra
        run: |
          git diff --name-only $BASE > ../files_changed
      - name: Write comment on PR with MIRAI warnings
        if: success()
        uses: actions/github-script@0.5.0
        env:
          PULL_ID: ${{ github.event.client_payload.pull_id }}
        with:
          github-token: ${{secrets.MIRAI_BOT}}
          script: |
            const fs = require('fs');
            const readline = require('readline');
            var path = require('path');

            function valid_warning(warning) {
              if (!"target" in warning || !"message" in warning) {
                return false;
              }
              if (!"src_path" in warning.target) {
                return false;
              }
              if (!"rendered" in warning.message) {
                return false;
              }
              return true;
            }

            async function process_warnings() {
              // get all the files that have changed
              const files_changed_reader = readline.createInterface({
                input: fs.createReadStream('files_changed'),
                console: false
              });
              var files_changed = [];
              for await (const line of files_changed_reader) {
                files_changed.push(line);
              }
              console.log("files changed:", files_changed);

              // parse the MIRAI warnings
              valid_warnings = [];
              const mirai_output = readline.createInterface({
                input: fs.createReadStream('mirai_results'),
                console: false
              });
              for await (const line of mirai_output) {
                // get the relative filename of the warning
                var absolute_path = path.resolve(process.cwd(), "libra")
                var warning = JSON.parse(line);
                console.log("parsed warning:", warning);
                if(!valid_warning(warning)) {
                  console.log("ignoring warning");
                  continue;
                }
                var touched_absolute = warning.target.src_path;
                var touched = path.relative(absolute_path, touched_absolute);

                // see if it matched one of the files changed
                if (files_changed.includes(touched)) {
                  console.log("valid warning found!");
                  valid_warnings.push(warning);
                } else {
                  console.log("not a valid warning");
                }
              }

              // no warnings
              if (valid_warnings.length == 0) {
                console.log("no valid warnings detected");
                return;
              }

              // create the message
              var message = "";
              for (warning of valid_warnings) {
                message += warning.message.rendered;
              }
              var message = `Hello you!

            It looks like MIRAI found some warnings:

            \`\`\`
            ${message}
            \`\`\`

            `;

              // comment
              /*
              await github.issues.createComment({
                owner: "libra",
                repo: "libra",
                issue_number: process.env.PULL_ID,
                body: data
              });
              */

              console.log(message);

              // warn devs
              console.log("MIRAI found warnings on https://github.com/libra/libra/pull/" + process.env.PULL_ID);
              throw "MIRAI warnings were found";
            }

            process_warnings();
